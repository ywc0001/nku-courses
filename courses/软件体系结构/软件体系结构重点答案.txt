1.“4+1”的视图模型包含哪几个视图，分别都叫什么？

答：逻辑视图、物理视图、进程视图、开发视图和场景视图

2. UML描述包含9个不同的图，5个动态和4个静态图，这9个不同名字的图都有哪些
各自侧重的重点是什么，起到的作用是什么。

答：
5个动态图：用例图、顺序图、协作图、状态图、活动图
4个静态图：类图、对象图、构件图、部署图

用例图：从用户角度描述系统功能。
类图：描述系统中类的静态结构。
对象图：系统中的多个对象在某一时刻的状态。
状态图：是描述状态到状态控制流，常用于动态特性建模
活动图：描述了业务实现用例的工作流程
顺序图：对象之间的动态合作关系，强调对象发送消息的顺序，同时显示对象之间的交互
协作图：描述对象之间的协助关系
构件图：一种特殊的UML图来描述系统的静态实现视图
部署图：定义系统中软硬件的物理体系结构

3.常见的三种设计模式，下面会有一些不同的模式，像单例模式、抽象工厂模式
桥接模式，这些模式可以解决什么样的问题，并且是怎么解决这些问题的。

创建型模式：
简单工厂模式：通过一个工厂类来创建不同类型的对象。只需要根据参数的不同返回不同的对象即可，
根据参数的不同，返回不同的类的实例。同时专门定义一个类来负责创建其他类的实例。
工厂模式：它提供一个抽象工厂接口和多个具体工厂类，每个具体工厂类只负责创建一种类型的对象。
工厂模式可以通过添加新的具体工厂类来扩展系统，符合开闭原则。
抽象工厂模式：是工厂的工厂，它提供一个抽象工厂接口和多个具体工厂类，每个具体工厂类负责创建一组相关的对象。
可以通过添加新的具体工厂类和对象类型来扩展系统，符合开闭原则。相比于工厂模式，抽象工厂模式更加灵活
单例模式：用于保证一个类只有一个实例，并提供一个全局访问点。
私有构造函数：单例类的构造函数必须是私有的，这样外部就无法通过构造函数创建新的实例
静态实例变量：单例类必须有一个静态实例变量，用于存储唯一的实例静态访问方法：
单例类必须有一个静态访问方法，用于获取单例实例。这个方法通常命名为 getInstance()。
线程安全：单例类必须是线程安全的，即在多线程环境下也能保证只有一个实例


结构型模式：
适配器模式：Adapter（电线是220V交流电，手机是20V直流电，直接充不行，所以用适配器，也就是插头作为中介，让手机能充上电）
用于将一个类的接口转换成客户端所期望的另一种接口，常用于解决接口不兼容的问题，使得原本不兼容的类能够协同工作。
适配器模式通过创建一个适配器类来实现接口的转换，从而让客户端能够使用类库的接口。说白了就是一个转换器，不需要
修改原来的接口。
反之装饰者模式是对原接口的扩展，会修改原来的接口

桥接模式：
用于将抽象部分和实现部分分离，使它们可以独立地变化。
例如在一个类有多个维度的变化时，使用继承会导致类的层次结构变得非常复杂。
桥接模式通过将抽象部分和实现部分分离，使得它们可以独立地变化，从而简化类的层次结构

行为型模式：
观察者模式/发布-订阅模式：
定义了对象之间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖它的对象都会得到通知并自动更新。
观察者模式通常用于解决对象之间的状态同步问题，例如在一个系统中，多个对象需要根据某个对象的状态进行相应的操作，
这时可以使用观察者模式来实现状态同步
策略模式：它定义了一系列算法，并将每个算法封装起来，使得它们可以相互替换。
策略模式通常用于解决算法的灵活性和可扩展性问题，例如在一个系统中，需要根据不同的条件选择不同的算法，
这时可以使用策略模式来实现算法的灵活选择。
（和状态模式很像，只是是因为处于和不同的状态所以干不同的活，这个是选择了不同的算法所以直接干这些不同的活）

这些设计模式可以解决不同的问题，例如工厂模式可以解决对象的创建问题，
适配器模式可以解决接口不兼容问题，
观察者模式可以解决对象间的依赖关系问题等等。
这些模式都是通过对系统的不同部分进行抽象和分离，使得系统更加灵活、可扩展、易于维护和重用

4.对体系结构进行相应的评估，既评估功能需求也评估非功能需求，故有质量属性
比如可用性、可维护性、安全性、可测试性等，这些质量属性关注哪些内容并且若要
提升这些质量属性又该有哪些策略呢？

答：
（1）可用性：考虑系统是否会发生故障，以及发生故障的后果是什么，能否对故障进行及时的响应。
要提升的话可以通过故障检测、故障恢复、故障避免来提升
故障检测：监控部件不定期的向被监控的部件发出ping消息，被监控部件向监控部件返回echo，通过这样的消息确定是否
有故障的发生。
或者通过心跳方式，被检测部件定期向检测部件发送个消息，若检测部件没有收到，那就认为是出故障了
或者通过抛出异常来捕获消息
故障恢复的话，可以设置一些冗余的方式来恢复故障，或者回滚
故障避免：如果一个事务的某一个部分可能会产生故障的话那么整个事物都不再运行
（2）可修改性：主要是修改系统在时间和金钱上的花费，主要是关注与修改的成本、修改的位置、修改的时间、由谁来修改的
提升策略：减少模块儿的大小（尽量拆分模块的功能，一个模块儿最好只负责一个功能）、尽量延迟模块儿的绑定
高内聚、低耦合
（3）性能：系统收到一个时间后对其响应的速度
提升策略：控制资源的需求（限制事件的响应数量和时间、添加事件的优先级设定、使用更高效率的算法等）、
管理资源（增加可用资源如计算、存储、带宽等等，采用一些并发机制多线程等）
（4）安全性：保证系统的正常使用下，抵抗对系统的攻击，降低系统受到攻击的影响
提升策略：及时检测攻击、抵抗攻击（验证密码指纹等、减少暴露和限制访问、黑白名单等、用户授权等）、
安全恢复（识别攻击者、版本回滚）等
（5）可测试性：关注能够及时发现系统中的错误
方法：控制和观察系统状态是否保持一致，另外要尽量降低系统的复杂性
（6）易用性：用于提升用户使用软件的使用体验。
方法：用户角度的话可以设计一些撤销返回退功能等等，系统的角度话可以记录用户常用的模型和场景

5.关于质量属性场景有6个组成部分，这六个部分都包括哪些呢？

答：质量属性场景描述了系统面对外在的刺激如何做出响应的反应

Source of stimulus（刺激源）：指触发软件系统响应的事件。
Stimulus（刺激）：指刺激源向软件系统发送的消息或事件，包括输入数据、请求、信号等。
Environments（环境）：指软件系统运行的环境，包括硬件、操作系统、网络、数据库等。
Artifact（构件）：指软件系统中的组件、模块等，用于实现系统的功能。
Response（响应）：指软件系统对刺激做出的响应，包括输出数据、状态变化、异常处理等。
Response measure（响应度量）：指对软件系统响应进行度量和评估的方法和指标，包括响应时间、吞吐量、可靠性、安全性等。

6.APM评估方法，包括了9个基本的步骤，都是哪些，对于软件体结构的测试和熟悉
的程序测试有那些不同点呢？

答：
1. 展示 ATAM：介绍 ATAM 方法，向评估团队成员介绍评估过程和工具，给出评估结果
2. 了解商业驱动因素：明确商业驱动因素，包括项目计划、投资、市场需求等，以便确定软件系统的成功标准。
3. 展示架构：展示软件系统的当前架构，包括分层、模块、组件等。
4. 确认架构方法：识别可行的架构方法，包括代理、管道、发布-订阅等。
5. 生成质量属性效用树：开发质量属性效用树，用于评估质量属性对商业目标的潜在影响。
6. 分析架构方法：对可能的架构方法进行分析，确定其对质量属性的影响。
7. 集思广益和优先场景：讨论采用不同架构方法可能产生的场景，然后根据商业目标和质量属性确定最重要的场景。
8. 分析架构方法：重新分析架构方法的贡献，并快速检查其中的关键问题。
9. 展示结果：整理并展示架构评估结果，以及其他建议和解决方案，向软件开发者提供反馈和指导。

答：软件体系结构测试与程序测试有所不同，软件体系结构测试是检
查软件设计的适用性，这种测试不考虑软件的实现代码

7.如果给出一个用户的需求，能否根据这个需求选择合适的体系结构风格来设计一个
满足要求的软件系统。

一般简单的就主程序-子程序调用的风格即可，一个主程序，下面分几个功能模块儿（输入、输出、各种功能）
每个功能模块儿又用了各种操作模块儿（各种字符串操作）
然后介绍一下几个功能模块儿的功能都是什么

面向对象的风格，通过类的继承派生
管道过滤器